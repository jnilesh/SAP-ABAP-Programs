*&---------------------------------------------------------------------*
*& Report ZTR_ATP_EXCEPTIONS
*&---------------------------------------------------------------------*
REPORT ZTR_ATP_EXCEPTIONS.

*1” Using SAP provided exception class
*
*DATA: a TYPE i VALUE 1.
* START-OF-SELECTION.
* a = a / 0.


*1.2
*DATA: a TYPE i VALUE 1.
* START-OF-SELECTION.
* catch system-exceptions COMPUTE_INT_ZERODIVIDE = 4.
* a = a / 0.
* endcatch.
* if sy-subrc = 4.
*  write:/5 'Division by zero!!!Check'.
* endif.
*1.3
*DATA: a TYPE i VALUE 1.
*START-OF-SELECTION.
*      TRY.
*        a = a / 0.
*        CATCH cx_sy_zerodivide.
*         write:/5 'Divide by zero caught'.
*      ENDTRY.


*2” When both superclass and subclass
*are used to track error
*
*DATA: a TYPE i VALUE 1.
*
*START-OF-SELECTION.
*      TRY.
*        a = a / 0.
*        CATCH cx_sy_zerodivide.
*         write:/5 'Div. by zero!'.
*
*        CATCH cx_root.
*         write:/5 'Error trapped'.
**
*      ENDTRY.


* 3.”  Propagation of Class-Based exceptions
*in procedures to the caller

*start-of-selection.
*try.
*perform sub1 using 5 .
*catch cx_sy_zerodivide.
**  p_no = p_no / 0 .
* write:/5 'Div. by zero!' .
*endtry.
*FORM sub1  USING P_NO  RAISING CX_SY_ZERODIVIDE.
*  p_no = p_no / 0 .
*
*ENDFORM.                    " sub_check_no

*4” Program can raise  exceptions
*based on SAP standard exception-classes
*data : inum type i .
*try.
* raise exception type cx_sy_zerodivide.
*CATCH cx_sy_zerodivide.
* write:/5 'Exception caught'.
*endtry.

*5 “Objects are created from exception
*classes when error is trapped

data : inum      type i value 5 ,
       descrip   type string ,
       progname  TYPE sy-repid ,
       lineno    type i .
 data : eref type ref to cx_sy_zerodivide.
try.
 inum = inum / 0.
CATCH cx_sy_zerodivide into eref.
* Utilizing methods/attributes using object of the exception classes
  call method eref->get_text
             receiving result = descrip.
 write:/5 'Name of the error trapped : ' , descrip.

  call method eref->get_source_position
           importing program_name = progname
                     source_line  = lineno .
 write:/5 'Error detected in program' ,
          progname(30) ,
          'line number' ,
          lineno.
  write:/5 eref->kernel_errid.
endtry.
