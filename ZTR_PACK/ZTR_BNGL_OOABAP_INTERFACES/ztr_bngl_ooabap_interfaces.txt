*&---------------------------------------------------------------------*
*& Report ZTR_BNGL_OOABAP_INTERFACES
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT ZTR_BNGL_OOABAP_INTERFACES.

***************************************************************************************
*SIMPLE USE OF AN INTERFACE.
***************************************************************************************
*INTERFACE I1.
*  DATA : NUM TYPE i .
*  METHODS : METH1.
*  ENDINTERFACE.
*
*  CLASS C1 DEFINITION.
*    PUBLIC SECTION.
**    PROTECTED SECTION.
*    METHODS : METH1.  "CLASS C1'S OWN METHOD
*    INTERFACES : I1.
*    ENDCLASS.
*
*    CLASS C1 IMPLEMENTATION.
*      METHOD : METH1.
*        WRITE:/5 'I AM METH1 IN C1'.
*        ENDMETHOD.
*
*      METHOD I1~METH1.
*        WRITE:/5 'I AM METH1 FROM I1'.
*        ENDMETHOD.
*        ENDCLASS.
*
*    START-OF-SELECTION.
*        DATA: OREF TYPE REF TO C1.
*            CREATE OBJECT OREF.
*        WRITE:/5 OREF->I1~NUM.
*        CALL METHOD OREF->METH1.
*        CALL METHOD OREF->I1~METH1.
*
*
****************************************************************************************
*INTERFACES CAN ONLY BE IMPLEMENTED IN THE PUBLIC SECTION OF A CLASS
****************************************************************************************
*
*INTERFACE I1.
*    METHODS : METH1.
*  ENDINTERFACE.
*
*  CLASS C1 DEFINITION.
*   PROTECTED SECTION.
*    INTERFACES:I1.
*    ENDCLASS.

****************************************************************************************
*A CLASS WITH AN INTERFACE SHOULD IMPLEMENT
*ALL THE METHODS OF THAT INTERFACE
****************************************************************************************
*
*INTERFACE I1.
*  METHODS : METH1,
*            METH2.
*  ENDINTERFACE.
*
*  CLASS C1 DEFINITION.
*    PUBLIC SECTION.
*    INTERFACES : I1.
*    ENDCLASS.
*
*    CLASS C1 IMPLEMENTATION.
*      METHOD I1~METH1.
*        WRITE:/5 'I AM METH1 FROM I1'.
*        ENDMETHOD.
*
*         METHOD I1~METH2.
*        WRITE:/5 'I AM METH2 FROM I1'.
*        ENDMETHOD.
*        ENDCLASS.
*
*     START-OF-SELECTION.
*        DATA: OREF TYPE REF TO C1.
*        CREATE OBJECT OREF.
*        CALL METHOD OREF->I1~METH1.
*        CALL METHOD OREF->I1~METH2.
**
****************************************************************************************
*VALUES FOR INTERFACE ATTRIBUTES ARE ASSIGNED AT THE
*TIME OF INCLUSION IN A CLASS
****************************************************************************************
*
*INTERFACE I1.
*  DATA : NUM1 TYPE I ,  "VALUE 100,
*         NUM2 TYPE I .
*  ENDINTERFACE.
*
*  CLASS C1 DEFINITION.
*    PUBLIC SECTION.
*    INTERFACES : I1
*    DATA VALUES NUM1 = 5
*                NUM2 = 6.
*    METHODS M1.
*    ENDCLASS.
*
*    CLASS C1 IMPLEMENTATION.
*      METHOD M1.
*        WRITE:/5 I1~NUM1,
*                 I1~NUM2.
*      ENDMETHOD.
*    ENDCLASS.
*
*    START-OF-SELECTION.
*    DATA : OREF TYPE REF TO C1.
*    CREATE OBJECT OREF.
*    CALL METHOD OREF->M1.

****************************************************************************************
*USE OF FINAL METHODS FROM INTERFACE
*****************************************************************************************

*INTERFACE I1.
*  METHODS : M1,
*            M2.
*  ENDINTERFACE.
*CLASS C1 DEFINITION.
*  PUBLIC SECTION.
*  INTERFACES : I1 FINAL METHODS M2.
*  ENDCLASS.
*
*  CLASS C1 IMPLEMENTATION.
*    METHOD I1~M1.
*      WRITE:/5 'I AM M1 IN C1'.
*      ENDMETHOD.
*    METHOD I1~M2.
*      WRITE:/5 'I AM M2 IN C1'.
*      ENDMETHOD.
*  ENDCLASS.
*
*  CLASS C2 DEFINITION INHERITING FROM C1.
*    PUBLIC SECTION.
*    METHODS:I1~M1 REDEFINITION.
*    ENDCLASS.
*
*  CLASS C2 IMPLEMENTATION.
*    METHOD: I1~M1.
*      WRITE:/5 ' I AM M1 IN C2'.
*      ENDMETHOD.
**        METHOD: I1~M2.
**      WRITE:/5 ' I AM M2 IN C2'.
**      ENDMETHOD.
*
*      ENDCLASS.
*
*  START-OF-SELECTION.
*  DATA : OREF1 TYPE REF TO C1,
*         OREF2 TYPE REF TO C2.
*  CREATE OBJECT : OREF1,OREF2.
*  CALL METHOD : OREF1->I1~M1,
*                OREF2->I1~M1,
*                OREF1->I1~M2,
*                OREF2->I1~M2.

****************************************************************************************
*USE OF ABSTRACT METHODS FROM INTERFACE
****************************************************************************************
*
*INTERFACE I1.
*  METHODS : M1,
*            M2.
*  ENDINTERFACE.
*
*  CLASS C1 DEFINITION ABSTRACT.
*    PUBLIC SECTION.
*    INTERFACES : I1 ABSTRACT METHODS M2.
*    ENDCLASS.
*
* CLASS C1 IMPLEMENTATION.
*   METHOD I1~M1.
*     WRITE:/5 'I AM M1 IN C1'.
*     ENDMETHOD.
*     ENDCLASS.
*
* CLASS C2 DEFINITION INHERITING FROM C1.
*   PUBLIC SECTION.
*   METHODS : I1~M2 REDEFINITION.
*   ENDCLASS.
*
*  CLASS C2 IMPLEMENTATION.
*    METHOD : I1~M2.
*      WRITE:/5 'I AM M2 IN C2'.
*      ENDMETHOD.
*      ENDCLASS.
*
*   START-OF-SELECTION.
*      DATA : OREF2 TYPE REF TO C2.
*      CREATE OBJECT : OREF2.
*      CALL METHOD : OREF2->I1~M1,
*                    OREF2->I1~M2.
**
*****************************************************************************************
**USE OF INTERFACE REFERENCE VARIABLE
*****************************************************************************************
*
*INTERFACE I1.
*  CONSTANTS     : C_NAME(4) TYPE C VALUE 'ABAP'.
*  DATA          : INUM TYPE I .
*  CLASS-DATA    : CNUM TYPE I.
*  METHODS       : M1.
*  CLASS-METHODS : M2.
*  ENDINTERFACE.
*
*  CLASS C1 DEFINITION.
*    PUBLIC SECTION.
*    INTERFACES : I1 DATA VALUES INUM = 5 CNUM = 6.
*    ENDCLASS.
*
*  CLASS C1 IMPLEMENTATION.
*    METHOD I1~M1.
*      WRITE:/5 'I AM M1 IN C1'.
*      ENDMETHOD.
*    METHOD I1~M2.
*      WRITE:/5 'I AM CLASS METHOD M2 IN C1'.
*      ENDMETHOD.
*   ENDCLASS.
*
*   START-OF-SELECTION.
*   DATA : IREF TYPE REF TO I1,
*          OREF TYPE REF TO C1.
*   CREATE OBJECT : OREF.
*
*   WRITE:/5  OREF->I1~INUM,
*              OREF->I1~CNUM,
*              C1=>I1~CNUM.
*   CALL METHOD : OREF->I1~M1,
*                  OREF->I1~M2,
*                  C1=>I1~M2.
*   WRITE:/5 SY-ULINE.
*   IREF = OREF.
*   WRITE:/5 IREF->INUM,
*            IREF->CNUM,
*            I1=>C_NAME.
*   CALL METHOD : IREF->M1,
*                  IREF->M2.

*****************************************************************************************
**USE OF NESTED INTERFACE
*****************************************************************************************
*
*INTERFACE I1.
*  METHODS M1.
*  ENDINTERFACE.
*
*INTERFACE I2.
*  METHODS : M1,M2.
*  INTERFACES I1.
*  ENDINTERFACE.
*
*  CLASS C1 DEFINITION.
*    PUBLIC SECTION.
*    INTERFACES : I2.
*    ENDCLASS.
*
* CLASS C1 IMPLEMENTATION.
*   METHOD: I1~M1.
*     WRITE:/5 'I AM M1 FROM I1'.
*     ENDMETHOD.
*   METHOD : I2~M1.
*     WRITE:/5 'I AM M1 FROM I2'.
*     ENDMETHOD.
*   METHOD : I2~M2.
*     WRITE:/5 'I AM M2 FROM I2'.
*     ENDMETHOD.
*     ENDCLASS.
*
*  START-OF-SELECTION.
*     DATA : OREF TYPE REF TO C1.
*     CREATE OBJECT OREF.
*     CALL METHOD : OREF->I1~M1,
*                    OREF->I2~M1,
*                    OREF->I2~M2.
*
****************************************************************************************
*USING ALIASES
****************************************************************************************
*
INTERFACE I1.
  METHODS M1.
  ENDINTERFACE.

INTERFACE I2.
  METHODS : M1,M2.
  INTERFACES I1.
*  ALIASES METH1 FOR I1~M1.
  ENDINTERFACE.

  CLASS C1 DEFINITION.
    PUBLIC SECTION.
    INTERFACES : I2.
    ALIASES METH1 FOR I1~M1.
    ALIASES METH2 FOR I2~M2.
    ENDCLASS.

    CLASS C1 IMPLEMENTATION.
      METHOD I1~M1.
        WRITE:/5 'I AM M1 FROM I1'.
        ENDMETHOD.
      METHOD I2~M1.
        WRITE:/5 'I AM M1 FROM I2'.
        ENDMETHOD.
      METHOD:I2~M2.
        WRITE:/5 'I AM M2 FROM I2'.
        ENDMETHOD.
     ENDCLASS.

  START-OF-SELECTION.
     DATA : OREF TYPE REF TO C1.
     CREATE OBJECT OREF.
*     CALL METHOD : OREF->I2~METH1.
     CALL METHOD : OREF->METH1.
     CALL METHOD : OREF->METH2.
**
*****************************************************************************************
*POLYMORPHISM VIA INTERFACES
****************************************************************************************

*INTERFACE I1.
*  METHODS : M1.
*  ENDINTERFACE.
*
*  CLASS C1 DEFINITION.
*    PUBLIC SECTION.
*    INTERFACES : I1.
*    ENDCLASS.
*
* CLASS C1 IMPLEMENTATION.
*   METHOD I1~M1.
*     WRITE:/5 'I AM METHOD M1 IN C1'.
*     ENDMETHOD.
*     ENDCLASS.
*
*     CLASS C2 DEFINITION.
*       PUBLIC SECTION.
*       INTERFACES : I1.
*       ENDCLASS.
*
*    CLASS C2 IMPLEMENTATION.
*      METHOD I1~M1.
*        WRITE:/5 'I AM METHOD M1 IN C2'.
*        ENDMETHOD.
*        ENDCLASS.
*
*   START-OF-SELECTION.
*        DATA : OREF1 TYPE REF TO C1,
*              OREF2 TYPE REF TO C2,
*              IREF TYPE REF TO I1.
*        CREATE OBJECT : OREF1,
*                        OREF2.
*        IREF = OREF1.
*        CALL METHOD IREF->M1.
*        IREF = OREF2.
*        CALL METHOD IREF->M1.

***************************************************************************************
*FRIENDSHIP BETWEEN CLASSES
****************************************************************************************
*
*CLASS C1 DEFINITION DEFERRED.
*
*CLASS C2 DEFINITION CREATE PRIVATE FRIENDS C1.
*  PROTECTED SECTION.
*  DATA : NUM TYPE I VALUE 5.
*  METHODS : M2.
*  ENDCLASS.
*
*CLASS C2 IMPLEMENTATION.
*  METHOD M2.
*    WRITE :/5 'I AM METHOD M2 IN C2'.
*    ENDMETHOD.
*    ENDCLASS.
*
* CLASS C1 DEFINITION.
*   PUBLIC SECTION.
*   METHODS : M1.
*   ENDCLASS.
*
*   CLASS C1 IMPLEMENTATION.
*     METHOD M1.
*       DATA : OREF2 TYPE REF TO C2.
*       CREATE OBJECT OREF2.
*       WRITE:/5 OREF2->NUM.
*       CALL METHOD OREF2->M2.
*       ENDMETHOD.
*       ENDCLASS.
*
*   START-OF-SELECTION.
*       DATA : OREF1 TYPE REF TO C1.
*       CREATE OBJECT OREF1.
*       CALL METHOD OREF1->M1.

****************************************************************************************
*SUBCLASSES OF FRIENDS CAN ALSO BECOME FRIENDS
**************************************************************************************
*
*CLASS C1 DEFINITION DEFERRED.
*
*CLASS C2 DEFINITION FRIENDS C1.
*  PROTECTED SECTION.
*  DATA : NUM TYPE I VALUE 5.
*  ENDCLASS.
*
*CLASS C2 IMPLEMENTATION.
*  ENDCLASS.
*
*CLASS C1 DEFINITION.
*  PUBLIC SECTION.
*  METHODS : M1.
*  ENDCLASS.
*
*CLASS C1 IMPLEMENTATION.
*  METHOD M1.
*    DATA : OREF2 TYPE REF TO C2.
*    CREATE OBJECT OREF2.
*    WRITE:/5 OREF2->NUM.
*    ENDMETHOD.
*    ENDCLASS.
*
* CLASS C11 DEFINITION INHERITING FROM C1.
*   PUBLIC SECTION.
*   METHODS : M11.
*   ENDCLASS.
*
* CLASS C11 IMPLEMENTATION.
*   METHOD M11.
*     DATA : OREF2 TYPE REF TO C2.
*     CREATE OBJECT OREF2.
*     WRITE:/5 OREF2->NUM.
*     ENDMETHOD.
*     ENDCLASS.
*
*  START-OF-SELECTION.
*     DATA : OREF11 TYPE REF TO C11.
*     CREATE OBJECT OREF11.
*     CALL METHOD OREF11->M11.

****************************************************************************************
*FRIENDSHIP IS ONE SIDED
****************************************************************************************
*
*CLASS C1 DEFINITION DEFERRED.
*
*CLASS C2 DEFINITION FRIENDS C1.
*  PROTECTED SECTION.
*  DATA : NUM2 TYPE I VALUE 15.
*  METHODS : M2.
*ENDCLASS.
*
*CLASS C1 DEFINITION FRIENDS C2.
*  PUBLIC SECTION.
*  METHODS : METHPUB.
*  PRIVATE SECTION.
*  DATA : NUM1 TYPE I VALUE 10.
*  METHODS : M1.
*ENDCLASS.
*
*CLASS C2 IMPLEMENTATION.
*  METHOD M2.
*    DATA : OREF1 TYPE REF TO C1.
*    CREATE OBJECT OREF1.
*    WRITE:/5 OREF1->NUM1.
*  ENDMETHOD.
*  ENDCLASS.
*
*  CLASS C1 IMPLEMENTATION.
*    METHOD M1.
*      DATA : OREF2 TYPE REF TO C2.
*      CREATE OBJECT OREF2.
*      WRITE:/5 OREF2->NUM2.
*    ENDMETHOD.
*
*    METHOD METHPUB.
*      CALL METHOD M1.
*      ENDMETHOD.
*ENDCLASS.
