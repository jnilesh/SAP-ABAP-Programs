*&---------------------------------------------------------------------*
*& Report ZTR_BNGL_OOABAP_METHODS
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT ZTR_BNGL_OOABAP_METHODS.


*# 1 * Local Class can understand
*data and types in the global area of the pgm

*TYPES: BEGIN OF TY_TAB,
*  NAME(15) TYPE C,
*  AGE TYPE I,
*  END OF TY_TAB.
*
*DATA: NUM1 TYPE I VALUE 5.
*
*CLASS C1 DEFINITION.
*  PUBLIC SECTION.
*  METHODS: METH1.
*  DATA: L_NUM LIKE NUM1,
*        IT_TAB TYPE STANDARD TABLE OF TY_TAB,
*        WA_TAB LIKE LINE OF IT_TAB.
*  ENDCLASS.
*
*CLASS C1 IMPLEMENTATION.
*  METHOD: METH1.
*    DATA: L_CNUM(2) TYPE C.
*    L_NUM = 0.
*    DO 5 TIMES.
*      L_NUM = L_NUM + 1.
*      L_CNUM = L_NUM.
*      CONCATENATE 'Student- '
*                  L_CNUM INTO WA_TAB-NAME.
*      WA_TAB-AGE = NUM1 * L_NUM.
*      APPEND WA_TAB TO IT_TAB.
*      CLEAR WA_TAB.
*    ENDDO.
*    LOOP AT IT_TAB INTO WA_TAB.
*      WRITE: /5 WA_TAB-NAME,
*                WA_TAB-AGE.
*      ENDLOOP.
*   ENDMETHOD.
*ENDCLASS.
*
*START-OF-SELECTION.
*DATA: OBJ1 TYPE REF TO C1.
*CREATE OBJECT OBJ1.
*CALL METHOD OBJ1->METH1.



*# 2 ** DEFERRED DEFINITION OF CLASS
*
*
*CLASS C2 DEFINITION DEFERRED.
*
*
*CLASS C1 DEFINITION.
*  PUBLIC SECTION.
*  DATA O2 TYPE REF TO C2.
*  ENDCLASS.
*
*CLASS C2 DEFINITION.
*  PUBLIC SECTION.
*  DATA: NUM TYPE I VALUE 5.
*  ENDCLASS.
*
*START-OF-SELECTION.
*  DATA: OBJ1 TYPE REF TO C1.
*  CREATE OBJECT OBJ1.
*  CREATE OBJECT OBJ1->O2.
*  WRITE: /5 OBJ1->O2->NUM.
*
*

*
*# 3 **USE OF FIELD SYMBOLS IN CLASS

*FIELD-SYMBOLS : <FS> TYPE ANY.
*CLASS C1 DEFINITION.
*  PUBLIC SECTION.
*  DATA:INUM TYPE I VALUE 5.
*  CLASS-DATA: ONUM TYPE I VALUE 10.
*  ENDCLASS.
*START-OF-SELECTION.
*DATA: OREF1 TYPE REF TO C1.
*CREATE OBJECT OREF1.
*ASSIGN OREF1->INUM TO <FS>.
*WRITE:/5 <FS>.
*ASSIGN OREF1->ONUM TO <FS>.
*WRITE:/5 <FS>.
*ASSIGN C1=>ONUM TO <FS>.
*WRITE:/5 <FS>.



*# 4***METHOD WITH ONE IMPORT
* PARAMETER/ONLY ONE NON-OPTIONAL PARAMETER
**
** PARAMETERS P_NUM TYPE I.
**CLASS C1 DEFINITION.
**  PUBLIC SECTION.
**  DATA: NUM TYPE I VALUE 5.
**  METHODS: METH1 IMPORTING INPUT1 TYPE I.
**
**ENDCLASS.
**
**CLASS C1 IMPLEMENTATION.
**  METHOD: METH1.
**    NUM = NUM * INPUT1.
**    WRITE:/5 NUM.
**    NUM = 5 .
**    ENDMETHOD.
**    ENDCLASS.
**
**START-OF-SELECTION.
**    DATA: OREF1 TYPE REF TO C1.
**    CREATE OBJECT : OREF1.
**   CALL METHOD OREF1->METH1 EXPORTING INPUT1 = p_num.
**    CALL METHOD OREF1->METH1( INPUT1 = 5 ).
**   CALL METHOD OREF1->METH1( 6 ).

*

*# 5 ** IMPORT PARAMTERS PASSED BY REF
*     CANT BE CHANGED INSIDE THE METHOD.
**
**DATA: NUM TYPE I.
**CLASS C1 DEFINITION.
**  PUBLIC SECTION.
**  METHODS: METH1 IMPORTING INPUT2 TYPE I
**                      VALUE(INPUT1) TYPE I.
**ENDCLASS.
**PARAMETERS P_NUM TYPE I.
**CLASS C1 IMPLEMENTATION.
**  METHOD: METH1.
**    INPUT1 = 4.
**    WRITE:/5 INPUT1,
**    / input2.
**
**  ENDMETHOD.
**ENDCLASS.
**
**START-OF-SELECTION.
**DATA: OREF1 TYPE REF TO C1.
**CREATE OBJECT : OREF1.
**NUM = 3 .
**
**
**CALL METHOD OREF1->METH1
**        EXPORTING INPUT1 =  p_num
**                  INPUT2 = P_NUM.

*

* 6**USE OF EXPORT AND CHANGING PARAMETERS OF A METHOD
*
*
DATA: W_TAX TYPE P DECIMALS 2,
      W_SALARY TYPE P DECIMALS 2.

CLASS CTAX DEFINITION.
  PUBLIC SECTION.
  METHODS: TAX_CALC IMPORTING GRADE TYPE C " A01
                    EXPORTING ITAX TYPE P "   0
                    CHANGING SALARY TYPE P.  "30,000
  ENDCLASS.

  CLASS CTAX IMPLEMENTATION.
    METHOD: TAX_CALC.
      CASE GRADE.
        WHEN 'A01'.
          ITAX = SALARY * '0.2'.
        WHEN 'A02'.
          ITAX = SALARY * '0.1'.
        WHEN OTHERS..
          ITAX = SALARY * '0.15'.
     ENDCASE.
     SALARY = SALARY - ITAX.
     ENDMETHOD.
     ENDCLASS.

START-OF-SELECTION.
     DATA: OREF1 TYPE REF TO CTAX.
     CREATE OBJECT: OREF1.
     W_SALARY = 30000.    W_TAX = 0.

     WRITE:/5 'BEFORE METHOD CALL, SALARY AND TAX ARE' ,W_SALARY,W_TAX.

     CALL METHOD OREF1->TAX_CALC
                 EXPORTING GRADE = 'A01'
                 IMPORTING ITAX = W_TAX
                 CHANGING SALARY = W_SALARY.

     WRITE:/5 'AFTER METHOD CALL, SALARY AND TAX ARE' ,W_SALARY,W_TAX.


*#7 *METHOD  TABLES AS EXPORT PARA
*
*TYPES:BEGIN OF TY_TAB,
*      MATNR TYPE MATNR,
*      MEINS TYPE MEINS,
*  END OF TY_TAB.
*
*DATA: ITAB TYPE STANDARD TABLE OF TY_TAB,
*      WA_TAB LIKE LINE OF ITAB.
*
*CLASS GET_MATERIALS DEFINITION.
*  PUBLIC SECTION.
*  METHODS: GETMARA IMPORTING I_MATNR TYPE C
*                   EXPORTING E_ITAB TYPE ANY TABLE.
*  ENDCLASS.
*
*CLASS GET_MATERIALS IMPLEMENTATION.
*  METHOD:GETMARA.
*    SELECT MATNR
*           MEINS
*      INTO TABLE ITAB
*      FROM MARA
*      WHERE MATNR = I_MATNR.
*      ENDMETHOD.
*      ENDCLASS.
*
*  PARAMETERS:P_MATNR TYPE MATNR.
*
*  START-OF-SELECTION.
*  DATA: W_MAT TYPE REF TO GET_MATERIALS.
*  CREATE OBJECT : W_MAT.
*  CALL METHOD W_MAT->GETMARA EXPORTING I_MATNR = P_MATNR
*                             IMPORTING E_ITAB = ITAB.
*
*CL_DEMO_OUTPUT=>DISPLAY_DATA( ITAB ).


*#8 **USE OF RETURNING

*DATA: W_NUM TYPE I.
*
*CLASS C1 DEFINITION.
*  PUBLIC SECTION.
*  METHODS: M1 IMPORTING INPUT1 TYPE I
*                        INPUT2 TYPE I
*              RETURNING  VALUE(RESULT) TYPE I.
*  ENDCLASS.
*
*CLASS C1 IMPLEMENTATION.
*  METHOD : M1.
*    RESULT = INPUT1 * 2 + INPUT2.
*    ENDMETHOD.
* ENDCLASS.
*
*START-OF-SELECTION.
* DATA: OBJ1 TYPE REF TO C1.
* CREATE OBJECT OBJ1.
*
* CALL METHOD OBJ1->M1 EXPORTING INPUT1 = 5
*                                INPUT2 = 4
*                      RECEIVING RESULT = W_NUM.
* WRITE: /5 W_NUM.
*1
* W_NUM = OBJ1->M1( INPUT1 = 10 INPUT2 = 20 ).
* WRITE: /5 W_NUM.
*2
* MOVE OBJ1->M1( INPUT1 = 2 INPUT2 = 3 ) TO W_NUM.
* WRITE: /5 W_NUM.
*
**

*#9 ** STATIC METHODS CAN ONLY USE STATIC
*    *ATTRIBUTES INSTANCE METHODS USE BOTH

*CLASS c1 DEFINITION.
*  PUBLIC SECTION.
*  CLASS-data : STNUM TYPE I VALUE 5.
*  DATA: INSTNUM TYPE I VALUE 6.
*
*  CLASS-METHODS : STMETH.
*  METHODS: INSTMETH.
*  ENDCLASS.
*
*CLASS C1 IMPLEMENTATION.
*  METHOD: STMETH.
*    WRITE: /5 STNUM.
*    WRITE:/5 INSTNUM.
*  ENDMETHOD.
*
*  METHOD INSTMETH.
*  WRITE: /5 STNUM.
*    WRITE:/5 INSTNUM.
*  ENDMETHOD.
*ENDCLASS.
*
*START-OF-SELECTION.
* DATA : OREF1 TYPE REF TO C1.
* CALL METHOD C1=>STMETH.
* CREATE OBJECT OREF1.
* CALL METHOD OREF1->INSTMETH.


*
*# 10 ** METHOD RAISING EXCEPTIONS
*
*CLASS C1 DEFINITION.
*  PUBLIC SECTION.
*  METHODS: M1 IMPORTING NUM1 TYPE I
*              EXPORTING NUM2 TYPE I
*              EXCEPTIONS E1.
*  ENDCLASS.
*
*CLASS C1 IMPLEMENTATION.
*  METHOD : M1.
*    IF NUM1 LT 5.
*      MESSAGE i398(00) WITH 'SHOULD BE >=5' RAISING E1.
*    ELSE.
*      NUM2 = NUM1 * 5.
*    ENDIF.
*  ENDMETHOD.
*  ENDCLASS.
*
*PARAMETERS : P_NO TYPE I.
*
*  START-OF-SELECTION.
*  DATA: OBJ1 TYPE REF TO C1.
*  CREATE OBJECT OBJ1.
*  CALL METHOD OBJ1->M1 EXPORTING NUM1 = 4
*                       IMPORTING NUM2 = P_NO
*                       EXCEPTIONS E1 = 4.
*  if sy-subrc = 4.
* WRITE:/5 P_NO.
*endif.





*# 11 **METHOD CAN CALL ITSELF
*
*CLASS C1 DEFINITION.
*  PUBLIC SECTION.
*  CLASS-DATA : STATNUM TYPE I.
*  METHODS: M1.
*  ENDCLASS.
*
*CLASS C1 IMPLEMENTATION.
*  METHOD: M1.
*    STATNUM = STATNUM + 10.
*    IF STATNUM GT 100.
*      EXIT.
*      ENDIF.
*    WRITE: /5 STATNUM.
**    CALL METHOD M1.
*  ENDMETHOD.
*ENDCLASS.
*
*START-OF-SELECTION.
*DATA: OBJ1 TYPE REF TO C1.
*CREATE OBJECT OBJ1.
*CALL METHOD OBJ1->M1.
*


*12   **USE OF ME IN METHODS ( self ref variabl)
*
*CLASS TESTCLASS DEFINITION.
*  PUBLIC SECTION.
*  DATA: I_NUM TYPE I VALUE 5.
*  METHODS: TESTMETHOD.
* ENDCLASS.
*
* CLASS TESTCLASS IMPLEMENTATION.
*   METHOD: TESTMETHOD.
*     DATA : I_NUM TYPE I VALUE 2.
*     WRITE: /5 I_NUM,
*            /5 me->I_NUM.
*     ENDMETHOD.
* ENDCLASS.
*
* START-OF-SELECTION.
*  DATA: I_NUM TYPE I.
*  DATA: MY_OBJ TYPE REF TO TESTCLASS.
*  CREATE OBJECT: MY_OBJ.
*  CALL METHOD MY_OBJ->TESTMETHOD.



*13 **POINTER TABLES

*CLASS testclass DEFINITION.
*  PUBLIC SECTION.
*  METHODS: TESTMETHOD.
*  CLASS-DATA: NUM TYPE I.
*  ENDCLASS.
*
*CLASS TESTCLASS IMPLEMENTATION.
*  METHOD : TESTMETHOD.
*    NUM = NUM + 5.
*    WRITE: /5 NUM.
*    ENDMETHOD.
*ENDCLASS.
*
*START-OF-SELECTION.
*DATA: MYOBJ TYPE REF TO TESTCLASS,
*      MYOBJ_TAB TYPE TABLE OF REF TO TESTCLASS.
*
*DO 5 TIMES.
* CREATE OBJECT MYOBJ.
* APPEND MYOBJ TO MYOBJ_TAB.
*ENDDO.
*
*LOOP AT MYOBJ_TAB INTO MYOBJ.
*  CALL METHOD : MYOBJ->TESTMETHOD.
*  ENDLOOP.



*# 14 * USE OF EXCEPTION TABLE
*CLASS CL_ABAP_OBJECTDESCR DEFINITION LOAD.
*
*CLASS C1 DEFINITION.
*  PUBLIC SECTION.
*  METHODs m1 EXCEPTIONS EXC.
*  ENDCLASS.
*
*CLASS C1 IMPLEMENTATION.
*  METHOD M1.
*    RAISE EXC.
*  ENDMETHOD.
*ENDCLASS.
*
*DATA R TYPE REF TO OBJECT.
*
*DATA F(3) TYPE C VALUE 'M1'.
*
*DATA : ETAB TYPE ABAP_EXCPBIND_TAB,
*       ETAB_LINE LIKE LINE OF ETAB.
*
*START-OF-SELECTION.
* ETAB_LINE-NAME = 'EXC'.
* ETAB_LINE-VALUE = 4.
* INSERT ETAB_LINE INTO TABLE ETAB.
* IF SY-SUBRC NE 0.
*   EXIT.
* ENDIF.
*
*CREATE OBJECT E TYPE C1.
*
* CALL METHOD R->(F) EXCEPTION-TABLE ETAB.
* WRITE SY-SUBRC.
* WRITE SY-SUBRC.
