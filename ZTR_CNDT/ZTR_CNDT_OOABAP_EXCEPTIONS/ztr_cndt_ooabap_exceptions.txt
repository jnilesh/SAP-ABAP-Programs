*&---------------------------------------------------------------------*
*& Report ZTR_CNDT_OOABAP_EXCEPTIONS
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT ZTR_CNDT_OOABAP_EXCEPTIONS.

* 1.1 USING SAP PROVIDED EXCEPTION CLASS
*VER1.
*DATA: lv_var TYPE I VALUE 1.
*START-OF-SELECTION.
*lv_var = lv_var / 0.
*
*WRITE lv_var.


**VER2.
*
*DATA: I TYPE I  VALUE 1.
*START-OF-SELECTION.
*CATCH SYSTEM-EXCEPTIONS
*  COMPUTE_INT_ZERODIVIDE = 4.
*  I = I / 0.
*  ENDCATCH.
*  IF SY-SUBRC = 4.
*    WRITE:/5 'DIVISION BY ZERO!!!!CHECK'.
*    ENDIF.

**VER3.
*
*DATA: I TYPE I VALUE 1.
*START-OF-SELECTION.
*TRY.
*  I = I / 0.
*  CATCH CX_SY_ZERODIVIDE.
*    WRITE: /5'DIVIDE BY ZERO CAUGHT'.
*    ENDTRY.


*1.2 WHEN BOTH SUPER CLASS AND SUB CLASS ARE USED

*VER1

*DATA: I TYPE I VALUE 1.
*START-OF-SELECTION.
*TRY.
*  I = I / 0.
*
*    CATCH CX_SY_ZERODIVIDE.
*    WRITE:/5 'DIV. BY ZERO!'.
*
*    CATCH CX_ROOT.
*    WRITE:/5 'ERROR TRAPPED'.
*
*ENDTRY.
*
**VER2
*DATA: I TYPE I VALUE 1.
*START-OF-SELECTION.
*TRY.
*  I = I / 0.
*  CATCH CX_SY_ZERODIVIDE.
*    WRITE:/5 'DIV. BY ZERO!'.
*    CATCH CX_ROOT.
*    WRITE:/5 'ERROR TRAPPED'.
*ENDTRY.

*1.3 PROPAGATION OF CLASS-BASED EXCEPTIONSIN
*PROCEDURES TO THE CALLER
*
*START-OF-SELECTION.
*TRY.
*  PERFORM SUB_CHECK_NO USING 5.
*  CATCH CX_SY_ZERODIVIDE.
*    WRITE:/5 'capgem'.
*    ENDTRY.
**&---------------------------------------------------------------------*
**&      Form  SUB_CHECK_NO
**&---------------------------------------------------------------------*
**       text
**----------------------------------------------------------------------*
**      -->P_5      text
**----------------------------------------------------------------------*
*FORM SUB_CHECK_NO  USING P_P_NO RAISING CX_SY_ZERODIVIDE.
*  P_P_NO = P_P_NO / 0.  "SUB_CHECK_NO
*
*ENDFORM.


**1.4 EXCEPTIONS BASED ON STANDARD EXCEPTION CLASS

*DATA: INUM TYPE I.
*TRY.
*  RAISE EXCEPTION TYPE CX_SY_ZERODIVIDE.
*  CATCH CX_SY_ZERODIVIDE.
*    WRITE:/5 'EXCEPTION CAUGHT'.
*ENDTRY.

*1.5 CREATION FROM EXCEPTION CLASS WHEN ERROR IS TRAPPED

*DATA: INUM TYPE I VALUE 5,
*      DESCRIP TYPE STRING,
*      PROGNAME TYPE SY-REPID,
*      LINENO TYPE I.
*DATA: I_EREF TYPE REF TO CX_SY_ZERODIVIDE.
*
*TRY.
*  INUM = INUM / 0.
*  CATCH CX_SY_ZERODIVIDE INTO I_EREF.
** UTILIZING METHODS/ATTRIBUTES USING OBJECT OF THE EXCEPTION CLASSES
*    CALL METHOD I_EREF->GET_TEXT
*                RECEIVING RESULT = DESCRIP.
*    WRITE:/5 'NAME OF THE ERROR TRAPPED : ' ,DESCRIP.
*
*    CALL METHOD I_EREF->GET_SOURCE_POSITION
*            IMPORTING PROGRAM_NAME = PROGNAME
*                      SOURCE_LINE = LINENO.
*    WRITE:/5 'ERROR DETECTED IN PROGRAM',
*              PROGNAME(30),
*              'LINE NUMBER',
*              LINENO.
*   WRITE:/5 I_EREF->KERNEL_ERRID.
* ENDTRY.

*1.6 LOCALLY DEFINED EXCEPTION-CLASS

*CLASS CX_MY_EXCEPTION DEFINITION INHERITING FROM CX_STATIC_CHECK.
*  ENDCLASS.
*
*  CLASS CX_MY_EXCEPTION IMPLEMENTATION.
*    ENDCLASS.
*
* CLASS C1 DEFINITION.
*   PUBLIC SECTION.
*   METHODS: M1 RAISING CX_MY_EXCEPTION.
*   ENDCLASS.
*
*   CLASS C1 IMPLEMENTATION.
*     METHOD M1.
*       RAISE EXCEPTION TYPE CX_MY_EXCEPTION.
*       ENDMETHOD.
*       ENDCLASS.
*
*       DATA: EX TYPE REF TO CX_MY_EXCEPTION,
*             OREF TYPE REF TO C1.
*
*       START-OF-SELECTION.
*       TRY.
*         CREATE OBJECT OREF.
*         OREF->M1( ).
*         CATCH CX_MY_EXCEPTION INTO EX.
*           WRITE:/5 'MY EXCEPTION CAUGHT'.
*       ENDTRY.


*1.7 NESTED TRY-ENDTRY BLOCK

START-OF-SELECTION.
DATA: NUM TYPE I VALUE 5.
TRY.
  TRY.
    NUM = NUM / 0.
    CATCH CX_SY_ZERODIVIDE.
      WRITE:/5 'DIVISION BY 0 CAUGHT'.
      NUM = 'CAPGEMINI'.
  ENDTRY.
  CATCH CX_SY_CONVERSION_NO_NUMBER.
  WRITE:/5 'CANNOT BE CONVERTED TO NUMBER'.
ENDTRY.
