*&---------------------------------------------------------------------*
*& Report ZTR_CNDT_OOABAP_INHERITANCE
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT ZTR_CNDT_OOABAP_INHERITANCE.

**************1.1 SUBCLASS CAN ACCESS PUBLIC/PROTECTED
*COMPONENTS OF SUPERCLASS********

*CLASS C1 DEFINITION.
*PUBLIC SECTION.
*METHODS : METH1.
*DATA : NUM TYPE I VALUE 6.
*PROTECTED SECTION.
*DATA : NUM2 TYPE I VALUE 7.
*METHODS : METH2.
*ENDCLASS.
*
*CLASS C1 IMPLEMENTATION.
*METHOD :  METH1.
*WRITE : /5 NUM.
*ENDMETHOD.
*
*METHOD : METH2.
*WRITE : /5 'I AM METH2'.
*ENDMETHOD.
*ENDCLASS.
*
*CLASS C2 DEFINITION INHERITING FROM C1.
*PUBLIC SECTION.
*METHODS : M1.
*ENDCLASS.
*CLASS C2 IMPLEMENTATION.
*METHOD M1.
*CALL METHOD : METH1, METH2.
*WRITE : /5 NUM2.
*ENDMETHOD.
*ENDCLASS.
*
*START-OF-SELECTION.
*DATA : OREF TYPE REF TO C2.
*CREATE OBJECT OREF.
*OREF->M1( ).
*
**cl_demo_output=>display_data.



***1.2 SUBCLASS CAN RE-IMPLEMENT
* INHERITED METHODS FROM SUPERCLASS***********

*
*CLASS C1 DEFINITION.
*  PUBLIC SECTION.
*    METHODS : METH1.
*  PROTECTED SECTION.
*    METHODS METH2.
*ENDCLASS.
*
*CLASS C1 IMPLEMENTATION.
*  METHOD : METH1.
*    WRITE : /5 'I AM METH1 IN CLASS C1'.
*    CALL METHOD METH2.
*  ENDMETHOD.
*  METHOD : METH2.
*    WRITE : /5 'I AM METH2 IN CLASS C1'.
*  ENDMETHOD.
*ENDCLASS.
*
*CLASS C2 DEFINITION INHERITING FROM C1.
*  PUBLIC SECTION.
*    METHODS : METH1 REDEFINITION.
*  PROTECTED SECTION.
*    METHODS : METH2 REDEFINITION.
*ENDCLASS.
*
*CLASS C2 IMPLEMENTATION.
*  METHOD METH1.
*    WRITE : /5 'I AM METH1 IN CLASS C2'.
*    CALL METHOD METH2.
*  ENDMETHOD.
*  METHOD METH2.
*    WRITE : /5 'I AM METH2 IN CLASS C2'.
*  ENDMETHOD.
*ENDCLASS.
*
*START-OF-SELECTION.
*  DATA : OREF1 TYPE REF TO C1,
*         OREF2 TYPE REF TO C2.
*  CREATE OBJECT : OREF1 , OREF2.
*  CALL METHOD : OREF1->METH1,
*                OREF2->METH1.
*


***1.3 OBJECTS CANNOT BE
*CREATED FROM AN ABSTRACT CLASS***************
*
*CLASS C1 DEFINITION ABSTRACT.
*PUBLIC SECTION.
*METHODS METH1.
*ENDCLASS.
**CLASS C1 IMPLEMENTATION.
***METHODS METH1.
**METHOD METH1.
**
**ENDMETHOD.
**
**ENDCLASS.
*
*
*CLASS C2 DEFINITION INHERITING FROM C1.
*
*ENDCLASS.
*
*CLASS C2 IMPLEMENTATION.
*
*METHOD METH1.
*
*ENDMETHOD.
*
*
*ENDCLASS.
*
*START-OF-SELECTION.
*DATA : OREF1 TYPE REF TO C1,
*       OREF2 TYPE REF TO C2.
*CREATE OBJECT OREF2.
*****CREATE OBJECT OREF1.


********************1.4 ABSTRACT METHODS
*CANNOT BE IMPLEMENTED IN ABSTRACT CLASS**********
*CLASS C1 DEFINITION ABSTRACT.
*PUBLIC SECTION.
*METHODS : METH1 ABSTRACT.
*ENDCLASS.
**CLASS C1 IMPLEMENTATION.
**METHOD : METH1 .
**WRITE : /5 'I AM METHOD : METH1 ' .
**ENDMETHOD.
**ENDCLASS.
*CLASS C2 DEFINITION INHERITING FROM C1.
*PUBLIC SECTION.
*METHODS : METH1 REDEFINITION.
*ENDCLASS.
*CLASS C2 IMPLEMENTATION.
*METHOD : METH1.
*WRITE : /5 'I AM METHOD : METH1 ' .
*ENDMETHOD.
*ENDCLASS.
*
*START-oF-SELECTION.
*DATA : OREF2 TYPE REF TO C2.
*CREATE OBJECT OREF2.
*
*CALL METHOD OREF2->METH1.
*


********************1.5 FINAL CLASSES
*CANNOT HAVE ANY SUBCLASS**********
*CLASS C1 DEFINITION FINAL.
*ENDCLASS.
*
*CLASS C1 IMPLEMENTATION.
*ENDCLASS.
*CLASS C2 DEFINITION INHERITING FROM C1.
*ENDCLASS.
*CLASS C2 IMPLEMENTATION.
*START-OF-SELECTION.
*DATA : OREF2 TYPE REF TO C2.
*CREATE OBJECT OREF2.


*******************1.6 FINAL METHODS
* CANNOT BE REDEFINED IN THE SUBCLASSES**********

*CLASS C1 DEFINITION.
*PUBLIC SECTION.
*METHODS : METH1 FINAL .
*ENDCLASS.
*CLASS C1 IMPLEMENTATION.
*METHOD METH1.
*WRITE : /5 'I AM METHOD METH1'.
*ENDMETHOD.
*ENDCLASS.
*CLASS C2 DEFINITION INHERITING FROM C1.
*PUBLIC SECTION.
*METHODS : METH1 REDEFINITION.
*ENDCLASS.
*CLASS C2 IMPLEMENTATION.
*METHOD : METH1.
*WRITE : /5 'I AM METH1, MODIFIED IN CLASS C2'.
*ENDMETHOD.
*ENDCLASS.
*
*START-OF-SELECTION.
*DATA : OREF2 TYPE REF TO C2.
*CREATE OBJECT OREF2.
*

****1.7 STATIC ATTRIBUTES EXIST ONLY ONCE PER
**INHERITANCE TREE*************
*
*CLASS C1 DEFINITION.
*PUBLIC SECTION.
*CLASS-DATA : NUM TYPE I.
*ENDCLASS.
*CLASS C1 IMPLEMENTATION.
*ENDCLASS.
*
*
*CLASS C2 DEFINITION INHERITING FROM C1.
*ENDCLASS.
*CLASS C2 IMPLEMENTATION.
*ENDCLASS.
*
*
*CLASS C3 DEFINITION INHERITING FROM C1.
*ENDCLASS.
*
*START-OF-SELECTION.
*C1=>NUM = 10.
*WRITE : /5 C2=>NUM.
**



*1.8 CONSTRUCTORS OF SUPERCLASS
*FLOWS DOWN THE CHAIN***********

*CLASS C1 DEFINITION.
*PUBLIC SECTION.
*METHODS : CONSTRUCTOR.
*ENDCLASS.
*CLASS C1 IMPLEMENTATION.
*METHOD CONSTRUCTOR.
*WRITE : /5 'I AM C1'.
*SKIP.
*ENDMETHOD.
*ENDCLASS.
*
*CLASS C2 DEFINITION INHERITING FROM C1.
*ENDCLASS.
*CLASS C2 IMPLEMENTATION.
*
*ENDCLASS.
*
*START-OF-SELECTION.
*DATA : OBJ TYPE REF TO C2.
*CREATE OBJECT : OBJ.


***1.9 SUBCLASS CAN HAVE ENHANCED CONSTRUCTOR
*THAN ITS UPDATES*******
*CLASS C1 DEFINITION.
*  PUBLIC SECTION.
*  METHODS : CONSTRUCTOR.
*ENDCLASS.
*
*CLASS C1 IMPLEMENTATION.
*  METHOD CONSTRUCTOR.
*    WRITE : /5 'Calling super class constructor'.
*    SKIP.
*  ENDMETHOD.
*ENDCLASS.
*
*CLASS C2 DEFINITION INHERITING FROM C1.
*  PUBLIC SECTION.
*  METHODS : CONSTRUCTOR.
*ENDCLASS.
*
*CLASS C2 IMPLEMENTATION.
*  METHOD CONSTRUCTOR.
*    CALL METHOD SUPER->CONSTRUCTOR.
*    WRITE : /5  'Calling sub class C2 constructor'..
*    SKIP.
*  ENDMETHOD.
*ENDCLASS.
*
*
*CLASS C3 DEFINITION INHERITING FROM C2.
*  PUBLIC SECTION.
*  METHODS : CONSTRUCTOR.
*ENDCLASS.
*
*CLASS C3 IMPLEMENTATION.
*  METHOD CONSTRUCTOR.
*    CALL METHOD SUPER->CONSTRUCTOR.
*    WRITE : /5  'Calling sub class C3 constructor'..
*    SKIP.
*  ENDMETHOD.
*ENDCLASS.
*START-OF-SELECTION.
*DATA : OBJ1 TYPE REF TO C3.
*CREATE OBJECT : OBJ1.


******1.10 STATIC CONSTRUCTOR
**OF A CLASS IS CALLED ONLY ONCE PER PROGRAM*

*CLASS C1 DEFINITION.
*  PUBLIC SECTION.
*  CLASS-METHODS : CLASS_CONSTRUCTOR.
*ENDCLASS.
*
*CLASS C1 IMPLEMENTATION.
*  METHOD CLASS_CONSTRUCTOR.
*     WRITE : /5 'Calling super class constructor'.
*    SKIP.
* ENDMETHOD.
*ENDCLASS.
*
*CLASS C2 DEFINITION INHERITING FROM C1.
*  PUBLIC SECTION.
*  CLASS-METHODS :CLASS_CONSTRUCTOR.
*ENDCLASS.
*
*CLASS C2 IMPLEMENTATION.
*  METHOD CLASS_CONSTRUCTOR.
*    WRITE : /5 'Calling sub class constructor'.
*    SKIP.
*  ENDMETHOD.
*ENDCLASS.
*
*START-OF-SELECTION.
*
*DATA : OBJ1 TYPE REF TO C2.
*CREATE OBJECT : OBJ1.
**WRITE : /5 'HI'.
**DATA : OBJ2 TYPE REF TO C1.
**CREATE OBJECT : OBJ2.
*

*****1.11 STATIC TYPE AND DYNAMIC TYPE
*OF A VARIABLE ***
*
*CLASS C1 DEFINITION.
*  PUBLIC SECTION.
*  METHODS : M1.
*ENDCLASS.
*
*CLASS C1 IMPLEMENTATION.
*  METHOD M1.
*    WRITE : /5 'I AM M1 OF C1'.
*  ENDMETHOD.
*ENDCLASS.
*
*CLASS C2 DEFINITION INHERITING FROM C1.
*  PUBLIC SECTION.
*  METHODS : M1 REDEFINITION.
*ENDCLASS.
*
*CLASS C2 IMPLEMENTATION.
*  METHOD M1.
*    WRITE : /5 'I AM M1 OF C2'.
*  ENDMETHOD.
*ENDCLASS.
*
*START-OF-SELECTION.
*DATA : OREF1 TYPE REF TO C1,
*       OREF11 TYPE REF TO C1,
*       OREF111 TYPE REF TO C1,
*       OREF2 TYPE REF TO C2.
*
*CREATE OBJECT : OREF1,
*                OREF11 TYPE C2,
*                OREF111,
*                OREF2.
*
*OREF111 = OREF2.
*
*CALL METHOD : OREF1->M1 ,   " OUTPUT : I AM M1 OF C1
*              OREF11->M1,   " OUTPUT : I AM M1 0F C2
*              OREF111->M1,  " OUTPUT : I AM M1 OF C2
*              OREF2->M1.    " OUTPUT : I AM M1 OF C2
*

**1.12  METHOD OF A PARENT CLASS,
*      *USED FROM ITS SUBCLASS,
*      *USES ATTRIBUTES OF THE PARENT CLASS ONLY,
*      *IF THE METHOD IS NOT RE-DEFINED IN SUBCLASS **************
**
*CLASS C1 DEFINITION.
*  PUBLIC SECTION.
*  METHODS : M1.
*  PRIVATE SECTION.
*  DATA : NUM TYPE I VALUE 5.
*ENDCLASS.
*
*CLASS C1 IMPLEMENTATION.
*  METHOD : M1.
*    WRITE : /5 NUM.
*  ENDMETHOD.
*ENDCLASS.
*
*CLASS C2 DEFINITION INHERITING FROM C1.
*  PUBLIC SECTION.
*  DATA : NUM TYPE I VALUE 6.
*ENDCLASS.
*
*CLASS C2 IMPLEMENTATION.
*
*
*ENDCLASS.
*
*START-OF-SELECTION.
*DATA : OREF2 TYPE REF TO C2.
*CREATE OBJECT : OREF2.
*CALL METHOD OREF2->M1.

************Example Of NARROW CASTING and WIDER CASTING**********
*
*
*CLASS class_super DEFINITION.
*  PUBLIC SECTION.
*    DATA:
*      w_area TYPE i.
*    METHODS:
*      area IMPORTING w_length TYPE i w_breadth TYPE i.
*ENDCLASS.                    "class_super DEFINITION
*
*CLASS class_super IMPLEMENTATION.
*  METHOD area.
*    w_area = w_length * w_breadth.
*
*    WRITE:/ 'Area of rectangle = '.
*    WRITE: w_area.
*  ENDMETHOD.                    "area
*ENDCLASS.                    "class_super IMPLEMENTATION
*
*CLASS class_sub DEFINITION INHERITING FROM class_super.
*  PUBLIC SECTION.
*    DATA:
*      w_height TYPE i.
*    METHODS:
*      area REDEFINITION.
*ENDCLASS.                    "class_sub DEFINITION
*
*CLASS class_sub IMPLEMENTATION.
*  METHOD area.
*    w_area = 6 * w_length * w_breadth * w_height.
*    WRITE:/ 'Area of the cube ='.
*    WRITE: w_area.
*  ENDMETHOD.                    "area
*ENDCLASS.                    "class_sub IMPLEMENTATION
*
*  DATA:
*    object_superclass  TYPE REF TO class_super,
*    object_subclass    TYPE REF TO class_sub,
*    object2_superclass TYPE REF TO class_super.
*
*START-OF-SELECTION.
*  CREATE OBJECT object_superclass.
*  CREATE OBJECT object2_superclass.
*  CREATE OBJECT object_subclass.
*
*  CALL METHOD object_superclass->area
*    EXPORTING
*      w_length  = 10
*      w_breadth = 5.
*
*
*  "Narrow casting
*    SKIP 2.
*  WRITE / 'Narrow casting'.
*  object_subclass->w_height = 10.
*  object_superclass = object_subclass.
*
*  CALL METHOD object_superclass->area
*    EXPORTING
*      w_length  = 10
*      w_breadth = 10.
*
*  "Wide casting
*  SKIP 2.
*   WRITE / 'Wide casting'.
*  object_superclass ?= object2_superclass.
*
*  CALL METHOD object_superclass->area
*    EXPORTING
*      w_length  = 10
*      w_breadth = 5.
